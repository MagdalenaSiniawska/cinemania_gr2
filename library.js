import{g as C,a as b,c as w}from"./assets/footer-BCtfmS9H.js";import"./assets/vendor-nSNXNpMc.js";document.addEventListener("DOMContentLoaded",async()=>{const i=document.querySelector("#catalog"),m=document.querySelector("#genre-select"),p=document.querySelector("#load-more"),f=document.querySelector("#empty-library");let s=0;const d=6;let o=[],a=[];const M=()=>{const e=document.createElement("option");e.value="all",e.textContent="Genre",m.appendChild(e),["action","drama","comedy","horror","thriller"].forEach(n=>{const r=document.createElement("option");r.value=n,r.textContent=n.charAt(0).toUpperCase()+n.slice(1),m.appendChild(r)})},g=e=>{const t=document.createElement("span");return t.classList.add(`${e}-star`),t.innerHTML=e==="empty"?"&#9734;":"&#9733;",t},L=e=>{const t=document.createElement("div");t.classList.add("star-rating");const n=e/2,r=Math.floor(n),l=n%1>=.5?1:0,h=5-r-l;for(let c=0;c<r;c++)t.appendChild(g("full"));l&&t.appendChild(g("half"));for(let c=0;c<h;c++)t.appendChild(g("empty"));return t.outerHTML},E=e=>{o=o.filter(t=>t.id!==e),localStorage.setItem("myLibrary",JSON.stringify(o)),v()},u=(e,t)=>{const n=document.createDocumentFragment();e.forEach(r=>{const l=document.createElement("div");l.classList.add("film-card");const h=r.vote_average;l.innerHTML=`
                <button class="remove-movie" data-id="${r.id}">x</button>
                <img src="https://image.tmdb.org/t/p/w500${r.poster_path||""}" alt="${r.title||""} poster" class="film-poster"/>
                <div class ="film-card-descr">
                <h3 class ="film-card-title">${r.title||""}</h3>
                <p class ="film-card-genre">${r.genres.slice(0,2).join(", ")||"N/A"}</p>
                <p class ="film-card-year"> ${new Date(r.release_date).getFullYear()||""}</p>
                <p class ="film-card-stars">${L(h)||""}</p>
                </div>
            `,l.querySelector(".remove-movie").addEventListener("click",()=>E(r.id)),n.appendChild(l)}),t.append(n)},S=async()=>{try{const e=await C("day");o=await Promise.all(e.results.map(async t=>{const n=await b(t.id);return{...t,genres:await w(n.genres.map(r=>r.id)),poster_path:n.poster_path,release_date:n.release_date}})),console.log("All movies fetched:",o.length)}catch(e){console.error("Error fetching movies:",e)}},v=()=>{if(i.innerHTML="",a=o,!Array.isArray(o)||o.length===0){f.style.display="block",p.style.display="none";return}else f.style.display="none";u(a.slice(0,d),i),s=Math.min(d,a.length),y(),console.log("Displayed movies:",s),console.log("Filtered movies:",a.length)},y=()=>{p.style.display=s<a.length?"block":"none"};p.addEventListener("click",()=>{const e=a.slice(s,s+d);u(e,i),s+=e.length,y(),console.log("Displayed movies after loading more:",s)}),m.addEventListener("change",e=>{const t=e.target.value;a=o.filter(n=>t==="all"||Array.isArray(n.genres)&&n.genres.map(r=>r.toLowerCase()).includes(t)),i.innerHTML="",u(a.slice(0,d),i),s=Math.min(d,a.length),y(),console.log("Filtered movies after genre change:",a.length)}),M(),await S(),v()});
//# sourceMappingURL=library.js.map
